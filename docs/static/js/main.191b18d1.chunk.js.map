{"version":3,"sources":["components/Form.js","components/Header.js","components/New.js","components/ListNews.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","category","changeCategory","e","setState","target","value","error","props","getNewsApi","className","onChange","this","Component","Header","title","protoType","PropTypes","string","isRequired","func","New","newItem","description","source","url","urlToImage","image","src","alt","name","href","rel","object","ListNews","news","loaded","map","key","array","keyApi","App","a","fetch","response","json","articles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.191b18d1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Form extends Component {\n    state = {\n        category: 'general'\n    }\n\n    changeCategory = e => {\n        this.setState({\n            category: e.target.value,\n            error: true\n        }, () => {\n            this.props.getNewsApi(this.state.category)\n        });\n    }\n\n\n    render() {\n        return (\n            <div className='search row'>\n                <div className='col s0 m2 l3'></div>\n                <div className='col s12 m8 l6'>\n                    <form>\n                        <div className='input-field col-12'>\n                            <select\n                                onChange={this.changeCategory}\n                                value={this.state.category}>\n                                <option value='general'>General</option>\n                                <option value='business'>Business</option>\n                                <option value='entertainment'>Entertainment</option>\n                                <option value='health'>Health</option>\n                                <option value='science'>Science</option>\n                                <option value='sports'>Sports</option>\n                                <option value='technology'>Technology</option>\n                            </select>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Form;","import React, {Fragment} from 'react';\nimport Form from './Form'\nimport PropTypes from 'prop-types'\n\nconst Header = ({ title, getNewsApi }) => (\n    <Fragment>\n        <header>\n            <div className = 'section'>\n                <div className ='container'>\n                    <h1 className = 'header center grey-text text-darken-4'>{title}</h1>\n                    <p className = 'center-align'>On this website you can be updated with the interesting news for you. Its source is <strong>NewsAPI.org</strong> and it has been built with React. Discover what happens in the world right now!</p>\n                    <Form\n                    getNewsApi= {getNewsApi}/>\n                </div>\n              \n            </div>\n        </header>\n    </Fragment>\n         \n)\nHeader.protoType = {\n    title: PropTypes.string.isRequired,\n    getNewsApi: PropTypes.func.isRequired,\n}\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types'\n\nconst New = ({ newItem }) => {\n\n    const { description, source, title, url, urlToImage } = newItem\n\n    const image = (urlToImage) ?\n        <div className='card-image'>\n            <img src={urlToImage} alt={title} />\n            <span className='card-title'> {source.name} </span>\n        </div>\n        : null;\n\n    return (\n        <div className='col s12 m6 l4'>\n            <div className='card'>\n                {image}\n                <div className='card-content'>\n                    <span className='card-title'>{title}</span>\n                    <p>{description}</p>\n                </div>\n                <div className='card-action'>\n                    <a href={url} target='_blank' rel=\"noopener noreferrer\" className='orange darken-1 wavs-effect waves-light btn'>\n                        read more ...\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nNew.protoType = {\n    newItem: PropTypes.object.isRequired,\n}\nexport default New;","import React from 'react';\nimport New from './New'\nimport PropTypes from 'prop-types'\n\nconst ListNews = ({ news, loaded }) => {\n\n    return (\n        (loaded) ?\n            <div className='preloader-wrapper big active'>\n                <div className='spinner-layer spinner-blue'>\n                    <div className='circle-clipper left'>\n                        <div className='circle'></div>\n                    </div><div className='gap-patch'>\n                        <div className='circle'></div>\n                    </div><div className='circle-clipper right'>\n                        <div className='circle'></div>\n                    </div>\n                </div>\n            </div> : <div className='row container-cards'>\n                {news.map(newItem => (\n                    <New\n                        key={newItem.url}\n                        newItem={newItem} />\n                ))}\n            </div>\n    )\n};\n\nListNews.protoType = {\n    news: PropTypes.array.isRequired,\n}\n\nexport default ListNews;","import React, { Component, Fragment } from 'react';\nimport Header from './components/Header'\nimport ListNews from './components/ListNews'\n\n\nconst keyApi = 'f4aa2fc529d644c2807b99eece894c47'\n\n\nclass App extends Component {\n  state = {\n    news: [],\n    loaded: true,\n  }\n\n  getNewsApi = async (category = 'general') => {\n    const url = `https://newsapi.org/v2/top-headlines?country=de&category=${category}&apiKey=${keyApi}`;\n    const response = await fetch(url);\n    const news = await response.json()\n\n    this.setState({\n      news: news.articles,\n      loaded: false\n    })\n  }\n\n  componentDidMount() {\n    this.getNewsApi()\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Header\n          title='News React API'\n          getNewsApi={this.getNewsApi} />\n        <main className='grey lighten-3'>\n          <div className='container news-container'>\n            <ListNews\n              news={this.state.news}\n              loaded={this.state.loaded} />\n          </div>\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}